using System;
using System.Collections.Generic;
// using System.Data;
// using System.Linq;
// using System.Runtime.InteropServices;
using ChessChallenge.API;
// using ChessChallenge.Application;
// using Microsoft.CodeAnalysis;
// using System.Numerics;
// using System.Collections.Generic;

public class MyBot : IChessBot
{
    Move bestMoveSearch = Move.NullMove;
    int maxDepth = 3;

    public Move Think(Board board, Timer timer)
    {
        Console.WriteLine(NegaMaxAlphBeta(maxDepth, board, -1000, 1000)); // get next move and print evaluation for that move
        //NegaMaxAlphBeta(maxDepth, board, -1000, 1000);
        return bestMoveSearch;
    }

    double NegaMaxAlphBeta(int depth, Board board, double alpha, double beta)
    {
        if (depth == 0)
            return Quiescence(board, alpha, beta);

        var ordererdMoves = OrderMoves(board.GetLegalMoves());

        // Mate found, return mate score in relation with searth depth
        if (ordererdMoves.Count == 0)
            return board.IsInCheck() ? -100 + (maxDepth - depth) : 0;

        //Move[] moves = board.GetLegalMoves();
        //if (depth == 0 || moves.Length == 0) return -EvaluateMove(board); // why is this minus needed here?

        foreach (var move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -NegaMaxAlphBeta(depth - 1, board, -beta, -alpha);
            board.UndoMove(move);
            if (score > alpha) {
                alpha = score;
                if (depth == maxDepth) bestMoveSearch = move;
                if (alpha >= beta) break;
            }
        }
        return alpha;
    }

    List<Move> OrderMoves(Move[] moves)
    {
        List<Move> orderedMoves = new();
        Array.ForEach(moves, move =>
        {
            if (move.IsCapture || move.IsPromotion)
                orderedMoves.Insert(0, move);
            else
                orderedMoves.Add(move);
        });
        return orderedMoves;
    }

    double Quiescence(Board board, double alpha, double beta)
    {
        double eval = -EvaluateMove(board);
        if (eval >= beta) return beta;
        if (alpha < eval) alpha = eval;
        var ordererdMoves = OrderMoves(board.GetLegalMoves(capturesOnly: true));
        foreach (Move move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -Quiescence(board, -beta, -alpha);
            board.UndoMove(move);

            if (score >= beta) return beta;
            if (score > alpha) alpha = score;
        }
        return alpha;
    }

    double EvaluateMove(Board board)
    {
        // Evaluate a move from the perspective of the playe who played that move

        // preprocess positon for input to the neural network
        double[] input = new double[65];
        for (int i = 0; i < 64; i++)
        {
            var piece = board.GetPiece(new Square(i));
            var pieceType = piece.PieceType;
            if (pieceType != PieceType.None)
            {
                // Black pieces get converted to negative score
                int pieceVal = piece.IsWhite ? (int) pieceType : - (int) pieceType;
                // Always flip the board to be blacks turn, but whites perspective
                input[board.IsWhiteToMove ? 63 - i : i] = board.IsWhiteToMove ? -pieceVal : pieceVal;
            }
        }
        // neural network
        input[64] = 1;

        input = Layer(25, input, new ulong[407] { 2500530817360343057, 3598001517434907922, 3173120340148531988, 13109044002106583816, 12234920373581717976, 12421402077104908591, 12465309875635302956, 10944082493566922139, 3495402499028562612, 13029955024820973183, 3015896808718120052, 3353544498813673565, 3138637460744808892, 3216180189612880460, 2879671559294791966, 12713151798811963872, 3371134582494572507, 12614208381616238787, 3253899595151422138, 3168741225824824545, 12434204202109315592, 3502446878974422118, 12781541291106086951, 11899123438809231858, 3280490332809897759, 12852616660501046478, 2613121639036038039, 3035198892200079487, 12967460203257738298, 2782433845528277347, 3477816798473823803, 2339529703366272801, 11954854388943006104, 3616722440331079073, 13022069911527042259, 12401137250800022266, 12374915663702601626, 2253120078863936345, 11717426468719012442, 12642645224858956791, 12837005276860461315, 12721877024815101247, 12710482560034976108, 3344542043048586347, 3281628943628513439, 12780143584257323200, 3506947188660802615, 2094365505503665534, 3502868655389943500, 3325536243921331443, 10880471985557579472, 2465761828654359377, 3569719834381069446, 3189021698569810668, 12418017050115421174, 12201845281546972438, 12125284893263409692, 3552548089027932191, 3624310397637374779, 12248019790000369523, 2908795513627586962, 3127661068362953077, 2916411257222115082, 12019874625448259211, 13068649582934928991, 12993787457341239621, 11421597518053945690, 3386901117552636331, 3793898901437263940, 3047016050253145236, 12475022355358232301, 3668233780501591261, 3016199765003283464, 12374395051590002286, 3545086212590545163, 12103471963423781147, 3645699873723657466, 3604056581699380678, 12497687705486439796, 3488065133465482358, 12272641441601202590, 3196183272734929348, 3369305147534027125, 3310626065299944102, 12458269034859016826, 3542269137039439210, 12409150474485280147, 12833766519225691576, 11883078295691145350, 12997723884935164076, 12833344641859922477, 12790982142375408650, 12766348333708784852, 3305980710275952001, 11775278913715908248, 12929045646455252770, 3785894332334812588, 12887526043024863668, 12459266195153596895, 3802913092853867576, 3300755695761436813, 3598011151060185701, 3646554449745751843, 12396633124976797771, 12458549523984987081, 12997857318938586553, 3583209725160338361, 11869989148490934810, 3710882730607718855, 11926852267403718666, 11861537915854661415, 12574250232720697223, 3173961011297691845, 2990723700488219601, 3467818692051086451, 13029814944434041420, 12510897360611423416, 3327369780585637883, 2634658488438533941, 2643243869998130374, 12992376532680977309, 3263473025957996293, 3454451836973199646, 3464725347018222127, 3478098732860748644, 12520904630022811454, 3470495410349681020, 3576185070112550587, 12911454634899551026, 1689740302278504557, 12533704066246092021, 3242759577688091865, 12562271079413916826, 3510463819771192532, 12957897679680319119, 12834609468809948697, 12921304216932226350, 12130626033017532577, 11277629039436835091, 1555626817467330416, 13005882776680542970, 12736938914521787432, 11586826821083702974, 12832780220852185580, 12308814729867702931, 3184939336427907497, 3621795129543799953, 12708492994030383609, 12440969318924625529, 12270109453152136970, 1971789348641943670, 3662324826365243507, 3620947988053339734, 3483150434809491753, 3409419903782890465, 12721727899123200133, 3606438521135048186, 3596177290222678169, 3102044934245461941, 12975623714163469913, 3438412184725728254, 12528079304225173484, 12568752262413136020, 3688501488476236278, 3330883869043830031, 12631373791781400169, 3275439395469863834, 11667324605802688559, 12176376232978002564, 3340739698109951855, 12438978167670780745, 3351853497170306318, 12660378682961963377, 3405194203532371667, 11882375542508793846, 12462071779471043727, 3398432232790764469, 3553109709662791882, 13043741760176926715, 3322016187655793338, 12470098377684721529, 3465711272111517328, 3487941971235253309, 3321035970790109030, 12503031312829591782, 3468670510950853185, 12583247536556257467, 12733982141140283503, 3754636168045081158, 12771552956002316635, 3294715215077024964, 3541703539319709122, 3192401277143886514, 3373527476338042315, 3503714239976943744, 3113733803789923140, 3264602215780819333, 12461935592566598713, 10982764465839190135, 3118655563408910644, 12941424504401407829, 12222682446527930991, 3593923332272826427, 2801007150162129347, 3559165310861028860, 12391843725334260974, 2905007771224549957, 12741866116246975090, 12164685377036560438, 12069274209430614267, 2990577540617777750, 12764523230376177961, 12248155478479581714, 3398304768936521252, 12667831389853102987, 12481214042907419224, 3599133385170791133, 11271704254480265770, 12480930371058510375, 3434748002412507349, 12810824247028657173, 3672168988446339609, 12906241766320221870, 3553113246633701698, 3429118015348319686, 12953535498288672917, 3268540666408743136, 2945817049384332656, 12467567273883808223, 3696521100851982910, 12666568267806289272, 2974258359343098344, 3489780221594284346, 3539590226369326043, 12833482140915541835, 3618555455089389687, 12738750523196449325, 12433644335758748198, 3821071649907321472, 12506128256911190291, 2887424063311784099, 3481188442293546340, 3406744364682556547, 11466188375342625145, 2083953851924425856, 2263669791860011593, 11557698711643303150, 2350788983607767614, 3141005652063989082, 3453328917810360726, 12679218896386008241, 3490189755288168046, 3218150063647928490, 12438008331881163712, 3209418768754355513, 12674729964150629600, 3591386563225202288, 12386926634456364065, 11858445017545944235, 12679924162250682695, 3276843192611481825, 12803931333470597004, 12701470945877732991, 3376062159767286117, 12406617040580228220, 12669090257658784786, 12788161817731243114, 12863178030118021651, 3285711724565344500, 3369730521232940970, 3404208218697445796, 3436581469963791944, 12021146498395319276, 3578440915456242912, 2783134945303309945, 12734262669004419286, 3219695223197086080, 10591396213843800789, 12427169178703179615, 3890738804667364131, 12255896306735788212, 12155404253374425281, 2426927196247011812, 3384626517886938317, 12716951977194631215, 3473033458988166437, 12842753618164001411, 12881610738963623804, 3627797391394840979, 12396919099203170231, 12590708815867883665, 2340093559557725400, 12359340007798551356, 3763653078166711955, 3350309583046814439, 3397176824661357639, 2935835437894249226, 12786476004369476416, 3071788176068617999, 3546780087537608941, 12722721872935334804, 2624104630816184449, 12321472206835527777, 2655621862966041815, 3011266151118678541, 12934534258040713441, 2750483416393330876, 2912474610502840562, 2968347249448201990, 2671110079992833826, 3217594949653147735, 12551152113545786894, 11639604034284400110, 2690674117637450529, 12360037145587134374, 12689366020860948200, 3540721393992314430, 12723288756968925743, 12164553429262577924, 11566003069560498673, 12975340224446868935, 2971017269651419017, 12446442906354691881, 3434616161857385944, 12207188641892707022, 12651787459991775460, 3493857923636308611, 2596661904994841305, 12780700121679406422, 3706234242471569624, 12566080556204699538, 3940560416790097205, 12540327290366898438, 12475728691018771636, 12672730689033023980, 3601520487243652412, 12769591560374823781, 12367216097542385732, 3545798567222063237, 11805095953195314395, 11673376006398485976, 12232944740289325831, 12546655359886273431, 11728273967024353532, 3750286278912225866, 3413780863279313668, 12556361178550871740, 12778589828098992519, 12245341901121499409, 2999595099388390440, 12968165033085512708, 12029874290808663333, 2980311623927968521, 2636908965189169834, 3503568419532415271, 12751577174577390406, 3544668638724534281, 3432643803464381339, 3460066035711717085, 3275718510301818214, 12788024026506764748, 12803929411537939245, 12109110656075410547, 3237012305614680874, 12609273543685550596, 12548764605667225738, 2794814393681947518, 12719899682003953705, 11693369875844607379, 3478098163690221442, 12704563032206815473, 12447998045700726490, 11996352120342360127, 12644173294792486801, 3356221322240372855, 12355253859822023784, 3191832950053153897, 2875041500883759645, 12759860343410305550, 12030571943623301319, 12735248745981686802, 3712002439332311677, 1409684889508623393, 12446734661719142059, 2717119554035625185, 12507392605211831222, 13020083459068274515, 12801256193630712407, 3466418230129732210, 12463058893874704717, 12379174458847274501, 3728893789696273607, 12541860900861488447, 2425244245495885992, 3614891141351221204, 2428332041246289490, 3474012556895235653, 3427995293695389056, 3808114757826327282, 3760700820754051933, 3724530553816788934, 3618696942044524721, 3788712019715502320, 3530583183946233041, 3638390917479018717, 3758875509028728613, 13562 });
        input = Layer(20, input, new ulong[130] { 3364806240347040932, 12326125456039424341, 3552690001252298435, 3184238610313030792, 2947777985443016432, 12990832251474817571, 3037019365620560636, 3646553940662366597, 3408858577362202477, 3784624467102085282, 13015169636341068984, 13056400789862592194, 3498926923482935829, 3719871764290417737, 1827237386020008690, 12280672536354075785, 12274476687466411107, 12115158432013596047, 12067996263767748511, 3176215173411058853, 11924322697018912779, 3469932037373703287, 2872638732972534110, 3800814082363567004, 12741156664938279484, 2356708674905584098, 2653658601324885181, 2913323594603508104, 3764785633162731187, 3465289001672389080, 2562457395410056205, 2824514919374467488, 12830663465537418015, 3297112803224204126, 3133997981308465406, 12970282005265490542, 3561270830529786778, 3859906422039259767, 3758028728300483116, 12974498714120890034, 3793896674629530422, 12834045417333568489, 3917050276805979947, 12817019842721230031, 2744719127877005640, 3250245735859858103, 3754929117031609491, 2653663441785794982, 12564533837912714115, 3540012043661029648, 3053075984706450605, 12876409314692770399, 3848796093182555399, 12406628937982059026, 13018978503546088658, 12828557428313599471, 13014743197617892896, 3447001073860488367, 3731967401516771464, 13073019598534522246, 12920743367261368122, 12693312028410425747, 12661504209409716797, 12191303415307613452, 13097510460178641463, 3750843349037950613, 11267052744824370146, 3739717416683353762, 12559181284211632443, 3247423351776031734, 11562909247887290207, 3876246670293578981, 3663724668230053268, 12812512929519514450, 11886183385379877222, 12577755241902616762, 3465579908279971973, 3696384933190940003, 3554237819401056697, 3765347187330594055, 3500746159928980329, 12782958086927692004, 3540872572656332772, 11572887897852949829, 3455157723467754177, 12604925428418195805, 3575773526369152563, 3875961239690064183, 3828395052300612642, 3558455481637483031, 12156537759234536122, 12964643578636514256, 12867117520252152954, 12718501043124974434, 3721011794539785579, 12364828608998487153, 11796676228220268748, 3897642584473973467, 12242517391499898434, 3749436017164070548, 2310398220121614129, 2940062615567020801, 12641941022083492028, 12606047443496117973, 12841225333409690672, 12085603619496866819, 12800266513185288910, 12986745652301345149, 12685992729849409652, 11951763169957490151, 3702436464817251948, 3819248528565776617, 3123165481066083646, 12890049572526700154, 3762668334624290301, 12072231646774670616, 3065876565911187591, 3833324656959534753, 2261270657690187116, 12571294505136239378, 12877961515898254487, 12047319947396460605, 3502453546968888418, 3625031786750256970, 3265863662616294217, 3260802430362398600, 3300048542259619205, 2288442757471643835, 2980851576415661166, 3156231240249060270 });
        input = Layer(1, input, new ulong[6] { 12969297102915383695, 12548626485938761125, 12169906427318711239, 3756623464498311514, 12928906635530777121, 41497 });

        return input[0];
    }

    double[] Layer(int outputLength, double[] input, ulong[] rawWeights)
    {
        double[] output = new double[outputLength + 1];

        for (int i = 0; i < input.Length; i++)
        {
            for (int j = 0; j < outputLength; j++)
            {
                int weightIndex = i * outputLength + j;
                output[j] += (double) BitConverter.ToHalf(BitConverter.GetBytes(rawWeights[weightIndex / 4]), weightIndex % 4 * 2) * input[i];
            }
        }

        for (int i = 0; i < output.Length; i++)
            output[i] = outputLength == 1 ? Math.Tanh(output[i]) : Math.Max(0, output[i]);

        output[outputLength] = 1;
        return output;
    }
}