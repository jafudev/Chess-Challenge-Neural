using System;
using System.Collections.Generic;
// using System.Data;
// using System.Linq;
// using System.Runtime.InteropServices;
using ChessChallenge.API;
// using ChessChallenge.Application;
// using Microsoft.CodeAnalysis;
// using System.Numerics;
// using System.Collections.Generic;

public class MyBot : IChessBot
{
    Move bestMoveSearch = Move.NullMove;
    int maxDepth = 4;
    double[] layer1Weights;
    double[] layer2Weights;

    public Move Think(Board board, Timer timer)
    {
        layer1Weights = weightsForLayer(385, 5, new ulong[482] { 12468529756730503017, 2631279579630381843, 3328770485255610085, 10971099386178902495, 12620966405278182881, 3187046080095432682, 3423731033289271087, 11721508437857381568, 12510177506934434996, 11630173250336304812, 2367387765280220258, 12207615380529687584, 2746676387336430031, 12021562734257941746, 2540765830388984841, 11899807781730822194, 12330057032487151211, 3001412864703736858, 3058555287221938342, 2974395027143666801, 2964394429955614808, 11985813638456710564, 2914427918547693105, 2716844918724471122, 2820147083571699555, 2040315972555155471, 12207047139765397668, 2985650555879303583, 11816365646742464137, 2523186997342317045, 3035326618015474064, 11978215952991197870, 3022518398476102525, 12025504762582836825, 2852791837109854947, 1877618694198697976, 11887012747479887088, 3001976596318530159, 2589900623489771663, 2934986077991610873, 2570327864845576629, 11353060950975815886, 3140038513341702430, 12067573593718496555, 2558090813417072719, 2659270091929004252, 11582179696596559858, 3108236065060563151, 11873218029566271900, 2643657930866764502, 2720906931488074878, 11058356478552943084, 3309484855868860144, 2902333958266390660, 3146656679791046015, 11918529161928746857, 11607793760511929272, 3085437760177581096, 2392301425294052589, 3096831818691848894, 12135412993077784483, 1983042878008437684, 3508768542123140388, 2959753200023217475, 3136801078639670307, 3107807219231562804, 11327449305183721190, 3252354671980451350, 12250671642268541000, 2631683377357007893, 12383822912757836532, 12601402908746165723, 11751907739614783256, 2529667561929682850, 12669519210992152067, 12158783552706390560, 12636163603727494608, 12431675108111557766, 2162761390751493709, 2043974958389438063, 12223805842421326790, 12108681780168044158, 2982552903153821999, 12649257309765610893, 2726413554056506435, 2916683527999565843, 2540923537332448648, 12407440360216014987, 12699639556799899873, 11599344683698498848, 3262203869543444478, 12429130960839092168, 2620445116726421441, 12410840728821965523, 2983969162138823314, 3303015492705168748, 12211831462852373056, 3245317408857795432, 12533283462192606564, 2891639855010950694, 3265016508228480595, 12489926472018860694, 2915712401615957488, 12434200463149804779, 3177058810139023213, 3257685445828259652, 12435607986309836509, 2849281330360692884, 11424252170795198684, 3239547624965908064, 2322355690192088641, 12554956653542977213, 3329194589681425388, 12757904142518823478, 2469990138132900708, 3282190394611182811, 12265039347314011232, 3066018273948872350, 11612297396668444324, 3354388934449899237, 3152989708121254821, 12421258135441911223, 2795802343550234153, 12671771562624003304, 3292730864988532744, 3477813102578609904, 12444055869164099730, 3175231629992734200, 12476981558720834505, 3071506642945779561, 3347772096968109355, 12286710614123124782, 3372821282615734024, 2754281601929816940, 3528341638297625750, 3162561463581912342, 12411407593641553555, 3285569125096762696, 12542007337786780330, 2621425608269311467, 3410255908413876819, 12243646909740818919, 3075024300690450878, 11589495926465472899, 3425318923439124205, 3397591243830373808, 12270231541878301211, 2970315467563806414, 11182768570590800425, 3555909452790508055, 3255018975506313022, 12124581903698206162, 2994240179182184963, 11517991141954202156, 3523970186240075918, 3465709334901403465, 12628144210303954109, 10088249391485037605, 11609768502659688624, 3040260115489367769, 3438120616563025788, 12199731964275600747, 10916914656479359106, 12323024951317801368, 3184658140571934107, 3363536873290178839, 12114870634794397600, 3238558693736524579, 12744394971461362234, 3208408416224027730, 3283031136561966255, 12418576491117031032, 11287901557630839484, 12513018559161084934, 3200140213414667536, 3190426133348396244, 12448842412608073401, 2756113538613784192, 12652632750322985579, 3154539128260373085, 3192115253852875518, 12229851491993268546, 3057572070453423794, 12473335303232072849, 3323706950809758017, 2924996669182487735, 12325555045739344083, 3265864407851936921, 12248149270368266939, 3508915715959827960, 3477526366119766123, 12449968200688283283, 3214356029102567234, 12562557291748437025, 3158482462359496709, 3091348560796495761, 12349484743763898038, 3252635418949725808, 12491052215246236674, 3331586227228649415, 3551839969150411061, 12405215165595069851, 3192956689537248796, 12220287224805567841, 3245179319250398188, 3478375000227290233, 12473330022634762536, 3060387412870508400, 1306935416267582616, 3304289317736425706, 3467397716568878755, 12341039798618892496, 3186472942455435099, 12244212898428792919, 3443052379598171623, 3243907001792180100, 12641654631318235929, 2846745934157197319, 12685004215166282245, 3488776425344476162, 2490678815131741686, 12140345464475234546, 3304987982279487211, 12425194574010427830, 3060248949532273947, 3551277607576512307, 11907848267528940602, 2765680539644997682, 12570162162719762743, 3267410761386368624, 12029016817570394306, 12710894610785119992, 2887833910696452936, 12362150333880445226, 3225190949516487105, 2434665193949474874, 12262778811493853672, 3320314525673599334, 12690073144183465822, 2471963421950093762, 3473874157960605661, 12531599264011332094, 3378739266661920741, 12537506774720557100, 3466416224339308022, 3548746974243564668, 12705266425688371147, 3073899023537352671, 12565378385122209830, 3502440657642203154, 3294014602830982613, 12823486843578560442, 3483450277197983655, 12537512126223164899, 3442488630866947594, 3483165061327399859, 12785487678846939166, 3270088907594214159, 12629551909616201757, 3336375038508478321, 3483729024854765370, 12732003516265737266, 3379579645465866151, 12468829521904774622, 3487807334749056450, 3484010083244616224, 12521748138192482379, 3212384179542765248, 12848822424059620996, 3227722944369274368, 3263896002898406713, 12600561135941005607, 3013382822724512444, 12348073883551313810, 3387887617812409867, 3294858211710119293, 12613227479836471513, 3290350471705604381, 12509084223067369498, 3257562839624920129, 3573517094364883049, 12425765102411329342, 3378735560097017072, 12550737554700414876, 3537344525437317020, 3559724335122787467, 12670646828907311011, 3361850621941395558, 12786611162826123668, 3150880851319204859, 3303018069791845757, 12467424859241853061, 3578863512596721275, 12666986200392379662, 3188320390423589054, 3201969558157438259, 12604500853644079532, 3500336091437805661, 12671211533234056771, 3584070844704107943, 3524258449451887424, 12514992403742601199, 3650915660656093107, 12558624394510969996, 2959482759068529159, 3347772814465411923, 12599718360253477063, 3280777148610259611, 12109391272308747714, 3577319022987522108, 3547900818464942995, 12577763385097334453, 3584491453082446254, 12761847459416026454, 3106691096713638030, 3532139615661239499, 12549615698437615500, 3402381111643287831, 12785491241394417268, 3025624993416752764, 3663591513607484425, 12279400695883117008, 3655989116555702795, 13008985431067308981, 3486684351152926917, 3490204237866054897, 12992938782579634183, 3619682224649744291, 12834187799757894608, 3556207828623241968, 3625874498039034110, 12850512040626894104, 3418709293161657012, 12803787879548302200, 3604343391094124901, 3507937474963288703, 12869371705895564104, 3569017553483084268, 12974363905834332670, 3575350626670292516, 3769142722872062702, 12890482685624136503, 3602513741429814036, 12998007528973906925, 3526653634650649117, 3578870251433997417, 12919475651875188816, 3347216315525378928, 12813640856605143520, 3657541723635003463, 3710882397743461172, 12918627975639281726, 3652051078235828843, 12918069915519333015, 3546921937522471619, 3695401574688010681, 12984775900825006608, 3611520511228064720, 12979149740619969380, 3587735001646182552, 3784346799724933416, 12912437725196267940, 3613774110616859376, 12818988301292516424, 3644030864616665663, 3545375231725908695, 12963383751059452580, 3498369009434701867, 12785213318451278266, 3675556581683441665, 3363540120348701790, 12887669305866073101, 3642480568264962648, 12680785702702265340, 3742547454343721717, 3641920186676326938, 12962542083509727796, 3593502474857362449, 12935802972215685981, 3806154283602751535, 3708630683822240729, 12877253417510711483, 3690895449620100175, 12705836894016090794, 3736635582190662040, 3601106641431146825, 12887386100074558312, 3376207134331908901, 12917224000249049433, 3635869310016695574, 3304994205598659170, 12847138141835179267, 3783215058730299943, 12733702332615996161, 3617292107599786778, 3598009939941896006, 12934959275238110355, 3822065679330520207, 12739609463101436268, 3799686183095447913, 11289014257033291582, 11626235037914574098, 12348206993032424698, 12051401162770033260, 11489006569888329924, 2789174536888555684, 1414038242463000741, 12485434337807571571, 12171591465379664295, 12121484304403968183, 11862101144917191550, 2258463280033639933, 12425892433106250451, 2965097773621290064, 11393313322127631440, 3137357025625975811, 2565829936593512698, 12120079371303559459, 2943154553697738702, 2592993624823540951, 12056034908431526419, 12391701096078451859, 2821690673268989872, 12102472545760320964, 2890080792649934985, 11818470318039310708, 2530497993561286391, 2896847702446448805, 2704311149815735735, 3209960606757955628, 12048721779497512115, 11093811100700650139, 2764976658462548905, 2779606917282901147, 2497712189164759573, 1200111500683681902, 12051960764817475207, 3033630861668327978, 3161134613008163386, 11854503506696874403, 2998862553765521099, 12452216828762237113, 3027291704535788627, 11829853667192251588, 2935126168845625769, 11903483307327367521, 11595129121502503785, 3253051815992470612, 2816748506028746977, 10611514482605174263, 2623365535385233139, 11801865484865612881, 3186336285110739487, 11586820829531120383, 2586382733788457506, 12317523725263249117, 12002699179972597253, 3183511364778831730, 3001825814990398028, 2935975172454821728, 12114575853852270949, 11479575504857802468, 11707852239206262089, 12416046793796592874, 12356370641183155980, 12238988633199061432, 11862945788970445153, 929477371352034770, 2441842775583958060, 2627867966784743874, 2905425398698780800, 1882977377033496063, 12535956903407756340, 2546116365133553715, 2689256939335495285, 2772009983519496518, 11047802674267760420, 12226052887473366861, 12409290868381133003, 12265593975652787848, 3660919696069047438, 13103 });
        layer2Weights = weightsForLayer(6, 1, new ulong[2] { 4363352827173977532, 2969582910 });

        Console.WriteLine(NegaMaxAlphBeta(maxDepth, board, -1000, 1000)); // get next move and print evaluation for that move
        //NegaMaxAlphBeta(maxDepth, board, -1000, 1000);
        return bestMoveSearch;
    }

    double NegaMaxAlphBeta(int depth, Board board, double alpha, double beta)
    {
        if (depth == 0)
            return Quiescence(board, alpha, beta);

        var ordererdMoves = OrderMoves(board.GetLegalMoves());

        // Mate found, return mate score in relation with searth depth
        if (ordererdMoves.Count == 0)
            return board.IsInCheck() ? -100 + (maxDepth - depth) : 0;

        //Move[] moves = board.GetLegalMoves();
        //if (depth == 0 || moves.Length == 0) return -EvaluateMove(board); // why is this minus needed here?

        foreach (var move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -NegaMaxAlphBeta(depth - 1, board, -beta, -alpha);
            board.UndoMove(move);

            if (score > alpha) {
                alpha = score;
                if (depth == maxDepth) bestMoveSearch = move;
                if (alpha >= beta) break;
            }
        }
        return alpha;
    }

    List<Move> OrderMoves(Move[] moves)
    {
        List<Move> orderedMoves = new();
        Array.ForEach(moves, move =>
        {
            if (move.IsCapture || move.IsPromotion)
                orderedMoves.Insert(0, move);
            else
                orderedMoves.Add(move);
        });
        return orderedMoves;
    }

    double Quiescence(Board board, double alpha, double beta)
    {
        double eval = -EvaluateMove(board);
        if (eval >= beta) return beta;
        if (alpha < eval) alpha = eval;
        var ordererdMoves = OrderMoves(board.GetLegalMoves(capturesOnly: true));
        foreach (Move move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -Quiescence(board, -beta, -alpha);
            board.UndoMove(move);

            if (score >= beta) return beta;
            if (score > alpha) alpha = score;
        }
        return alpha;
    }

    double EvaluateMove(Board board)
    {
        // Evaluate a move from the perspective of the playe who played that move

        // preprocess positon for input to the neural network
        double[] input = new double[385];
        for (int i = 0; i < 64; i++)
        {
            var piece = board.GetPiece(new Square(i));
            var pieceType = piece.PieceType;
            if (pieceType != PieceType.None)
            {
                // Black pieces get converted to negative score
                int pieceVal = piece.IsWhite ? 1 : -1;

                // Always flip the board to be blacks turn, but whites perspective
                input[(board.IsWhiteToMove ? 63 - i : i) + 64 * ((int)pieceType - 1)] = board.IsWhiteToMove ? -pieceVal : pieceVal;
            }
        }
        input[384] = 1;

        // neural network
        input = Layer(5, input, layer1Weights);
        input = Layer(1, input, layer2Weights);


        return input[0];
    }

    double[] weightsForLayer(int inputDimension, int outputLength, ulong[] rawWeights)
    {
        double[] weights = new double[outputLength * inputDimension];
        for (int i = 0; i < inputDimension; i++)
        {
            for (int j = 0; j < outputLength; j++)
            {
                int weightIndex = i * outputLength + j;
                weights[weightIndex] = (double)BitConverter.ToHalf(BitConverter.GetBytes(rawWeights[weightIndex / 4]), weightIndex % 4 * 2);
            }
        }
        return weights;
    }

    double[] Layer(int outputLength, double[] input, double[] layerWeights)
    {
        double[] output = new double[outputLength + 1];

        for (int i = 0; i < input.Length; i++)
        {
            for (int j = 0; j < outputLength; j++)
            {
                output[j] += layerWeights[i * outputLength + j] * input[i];
            }
        }

        for (int i = 0; i < output.Length; i++)
            output[i] = outputLength == 1 ? Math.Tanh(output[i]) : Math.Max(0, output[i]);

        output[outputLength] = 1;
        return output;
    }
}