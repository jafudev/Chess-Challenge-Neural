using System;
using System.Collections.Generic;
// using System.Data;
// using System.Linq;
// using System.Runtime.InteropServices;
using ChessChallenge.API;
// using ChessChallenge.Application;
// using Microsoft.CodeAnalysis;
// using System.Numerics;
// using System.Collections.Generic;

public class MyBot : IChessBot
{
    Move bestMoveSearch = Move.NullMove;
    int maxDepth = 3;

    public Move Think(Board board, Timer timer)
    {
        Console.WriteLine(NegaMaxAlphBeta(maxDepth, board, -1000, 1000)); // get next move and print evaluation for that move
        //NegaMaxAlphBeta(maxDepth, board, -1000, 1000);
        return bestMoveSearch;
    }

    double NegaMaxAlphBeta(int depth, Board board, double alpha, double beta)
    {
        if (depth == 0)
            return Quiescence(board, alpha, beta);

        var ordererdMoves = OrderMoves(board.GetLegalMoves());

        // Mate found, return mate score in relation with searth depth
        if (ordererdMoves.Count == 0)
            return board.IsInCheck() ? -100 + (maxDepth - depth) : 0;

        //Move[] moves = board.GetLegalMoves();
        //if (depth == 0 || moves.Length == 0) return -EvaluateMove(board); // why is this minus needed here?

        foreach (var move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -NegaMaxAlphBeta(depth - 1, board, -beta, -alpha);
            board.UndoMove(move);
            if (score > alpha) {
                alpha = score;
                if (depth == maxDepth) bestMoveSearch = move;
                if (alpha >= beta) break;
            }
        }
        return alpha;
    }

    List<Move> OrderMoves(Move[] moves)
    {
        List<Move> orderedMoves = new();
        Array.ForEach(moves, move =>
        {
            if (move.IsCapture || move.IsPromotion)
                orderedMoves.Insert(0, move);
            else
                orderedMoves.Add(move);
        });
        return orderedMoves;
    }

    double Quiescence(Board board, double alpha, double beta)
    {
        double eval = -EvaluateMove(board);
        if (eval >= beta) return beta;
        if (alpha < eval) alpha = eval;
        var ordererdMoves = OrderMoves(board.GetLegalMoves(capturesOnly: true));
        foreach (Move move in ordererdMoves)
        {
            board.MakeMove(move);
            double score = -Quiescence(board, -beta, -alpha);
            board.UndoMove(move);

            if (score >= beta) return beta;
            if (score > alpha) alpha = score;
        }
        return alpha;
    }

    double EvaluateMove(Board board)
    {
        // Evaluate a move from the perspective of the playe who played that move

        // preprocess positon for input to the neural network
        double[] input = new double[65];
        for (int i = 0; i < 64; i++)
        {
            var piece = board.GetPiece(new Square(i));
            var pieceType = piece.PieceType;
            if (pieceType != PieceType.None)
            {
                // Black pieces get converted to negative score
                int pieceVal = piece.IsWhite ? (int) pieceType : - (int) pieceType;
                // Always flip the board to be blacks turn, but whites perspective
                input[board.IsWhiteToMove ? 63 - i : i] = board.IsWhiteToMove ? -pieceVal : pieceVal;
            }
        }
        // neural network
        input[64] = 1;

        input = Layer(20, input, new ulong[325] { 3354236265644830402, 3467405898564315518, 12861067377986384871, 12412247004249862695, 12861775156279882462, 3659921466091482955, 11985100854454661538, 12239852082938130479, 3459516662227612636, 12466303037375295103, 3675669633686121821, 13111575511630263115, 12800834509614359635, 12169201758516357919, 2864909548511015478, 3739722297765603543, 12479638897917832340, 12698508893847301496, 3748879709032756349, 13069499325421924750, 3664292493095021182, 13111290669451782507, 12899621922600792877, 3418707192963806219, 2897557628568023132, 3049131701746904927, 13002367172051382435, 11880130751880310774, 3635017345264006000, 12916658165977913636, 3802219281777929717, 12715393838293591910, 12273627765852351886, 3350028788839226423, 11754453059694603449, 3704819014260142090, 1064306569666965105, 12554537247375111394, 3334115383111529856, 12747773010501511732, 3458524127500282596, 12928621670907423037, 3199159610210988093, 2678990651163093257, 3471769581035172133, 3541995996602903217, 13079489782437654732, 12727929743970743570, 2594543990063641922, 12604783608492404464, 3603064467626439064, 12941287576646003125, 3525661900950483472, 3011123862961825399, 12724414457314193370, 3521859720895769141, 13024323648294791255, 12531027878933374446, 2962156575981318404, 13014048999938110038, 3752114704325979691, 12872890439425665747, 12968167285939251807, 3413074920975446813, 13020522464458286260, 3751830927265935752, 12560736977201670823, 12824885860299190040, 3207315645709953480, 10760560375030461006, 3666969898340626055, 13017425576199794186, 12541308269586363944, 3763368229544079050, 12786901088129725021, 3385769481768578852, 12818141883560341806, 12528222734756032624, 3893122264640861074, 12007214696077504849, 2018370465880188247, 2779756893414667378, 12999555944217916413, 3470061335152568786, 12817857833698898444, 3746484204178615906, 12546641828653803864, 3250661439201029785, 3459522535524411813, 12343577465082753031, 3430533503471068070, 12520334295134220345, 12768877523987215279, 3661331469496954758, 12607037364591309839, 3696651670042816812, 12716667905987225352, 12948183019977453863, 3075023609243906102, 3401958057357062151, 3629387895178011650, 3531862873730721419, 12885539466043730803, 12627724675992728033, 11465941032487595550, 3597447026509917676, 11736572526759653247, 11180235152033068115, 3642606039153418749, 3588582263382717938, 3479226307854512380, 12861485542371208013, 3306536893539952891, 3595474330771271869, 12854453214033326416, 3719463856232705291, 3347632641632416027, 12207472517461650537, 3611488410419737351, 12815050400315549954, 3482318422404935977, 3177483011240995188, 2758928335230610821, 2948646685488295234, 12481495640204128321, 3115275787143357001, 3486826804483306130, 12692737338231891867, 12123322183353314316, 12630118523250651702, 3743520590652220997, 12740579386993192548, 12148794375892379432, 3735087355894836533, 12784929300917136998, 3065740907186859392, 3507656311386056773, 3322727023970955895, 2783419980644789665, 12315990666825375513, 3307247601048334356, 3409140829776750601, 12851782530651074602, 12278694137149206542, 12947052726261788515, 3074747101383864032, 3164253614194144016, 11662268488702339267, 11619479645043765427, 13027560604088119099, 3337924460870151412, 2551043880397353418, 3155531637341106299, 3726067419868244343, 12750027898318169436, 2686590911542373470, 12586485529591067116, 12541310722139566679, 3679898600230299735, 13092021513356521247, 2713617055636696289, 3275287009944776656, 12777599763004928087, 3706938548336800199, 12687811047279899723, 3097544890603909667, 2962718166277862420, 12246888413990793282, 3480912411117300952, 12662768469356556452, 3247285452785692569, 2644935834154611156, 11872240615788260350, 12723708669535957284, 12849668979307360945, 2758934376522428045, 12749319340403503955, 2876584938148999448, 11752620255021019363, 11974561597353538302, 3609541993672322497, 3467406368833251474, 12664601546286445377, 12623780573156027859, 12122898918701477846, 3573800851908964894, 2519671807309427646, 12768036015541890148, 3594068577367731828, 12274608845884829814, 3522855418745696171, 3378162684402774389, 2532483269478393827, 3758167225794997866, 12845726139259826791, 3532425795718787279, 12682609779330621162, 2800307899540451353, 3588437832277078090, 2918666692701795192, 12623224828016505883, 12660092112100240619, 12918768334958964952, 3256294239284375285, 12672600218768716592, 3542252861353865672, 12032960918381703730, 12479808980845572110, 3560853192070079702, 12869934453957211238, 3592353281175761102, 3314001192276308047, 12387893822309084885, 12422248071825044013, 12461233101234547666, 12604929998185148546, 12788450581302521955, 3254319069656264359, 3187613829628211393, 12785211020392313699, 3616022820121652859, 12684583617588932522, 12790979208906092633, 12588598137995964094, 12283058375729099635, 3316529416278683214, 1383928385207382506, 12327393229493251270, 12983229712523308166, 12733136425496621802, 3665279966151421707, 12808421373978780528, 12916939963256418810, 3707777488419827516, 12798715632650564739, 3271495842227794937, 12832072839645082467, 12869933160991435080, 3623341171609349231, 12599290396920686513, 3507931799175277954, 12413803704287408963, 12893859109670825251, 3509623408530108727, 12895399428771031883, 3653743636683665271, 2410744343509971448, 12672753068012903139, 12240135050411091416, 12265039624202957128, 3455304675729125556, 11655510145019457539, 12832914771308588407, 12350475710883474593, 12638977286031846953, 1791220245506338221, 12359478793296851467, 12158354550180947938, 2822261790282486234, 12887948579681446452, 3624745602310452293, 12199602630019298163, 13047544079627170282, 3026053822363577396, 12602104377823112917, 3645011903773324232, 12754390693846561119, 12988568380579917215, 12564958406032273859, 11374312367730470330, 3747757137859555530, 12552853053674794037, 12720469774379920714, 2998188564128575750, 11494504255054916998, 11554735289437696590, 12174833008246043152, 12717651227978837654, 12521041480788649303, 12656576056516685677, 3263614422659085314, 12452929254459945752, 13050077204208953916, 3470499535563368280, 12693308699809493338, 3548471063332762599, 12820257537042919384, 12880902971465734007, 12776347468620606415, 12143585682369163713, 2258751874066525385, 11694917955996267771, 12438003321783560235, 3304986955821887771, 12650098917325613658, 3376052204068188650, 12417465722411527361, 3139343832533741032, 2109286327120112042, 2352060719320737213, 12519921359725376513, 12183841483142116491, 12487121484798144987, 12938195717732998844, 12768596409847132775, 3445450556062739533, 12410144325494682210, 12747188783343968547, 12696124126038143224, 12688940720277368904, 3417301353403888172, 2990866972047552893, 12437436914477638446, 12829264963649515929, 12806312594076610424, 2986927754536858160, 11582045631230620360, 12100237608260183909, 2711356844129563550, 11434131892563751592, 3793497248882177678, 11253991158556800188, 3697207582651593791, 3523844813994012019, 3689352452517082138 });
        input = Layer(20, input, new ulong[105] { 3772247408663179182, 12771838906304377257, 3791385602646420643, 12912155451334569568, 13063864876045217574, 2407928054073436279, 2774548032248818831, 2672235924127364105, 12992515857166775124, 3674548724681159030, 13197711117320268904, 3718614867964048413, 3695539769488616167, 3778292688920032566, 2025272946456245700, 3750146108359880770, 12636588940780319858, 13039239500623228406, 3330889130526028983, 12913982188828012655, 13050777906719371443, 3726071089988121870, 3277548570207822889, 12805195909283131519, 3296689832794600023, 3746768638359581019, 3501601373706793655, 3733262662738621052, 2441144336811767020, 2620004562598006482, 12746223994078894940, 3375358384427772120, 12042403878646526142, 12729890843170647941, 3625736685385855685, 13034589451293207078, 3533409781236576469, 12645603690597528121, 1912401268167354497, 13001075445625369230, 12890762506796446159, 3335247227388474391, 12886398150165508202, 3884963007780925558, 2761883584502412605, 13089345282721035877, 12652495813905395243, 3717207724803960836, 3890881741297103472, 3633615126321899030, 3735228284506943546, 12853895560017065304, 3840358541875129600, 2999450423225850631, 3061802147332894429, 12238718677325393921, 3012117306383216831, 3578437947863217081, 943700928863842590, 12846284066076434493, 13046983137689383466, 3782657595591078278, 3512303184550107824, 3845707298570515453, 12763539292209165233, 13117771964090725550, 12965482280686760855, 3816146020362269204, 3749721756992484276, 12763255830393368107, 3653458556176671058, 12748620351726628798, 3768863618786603913, 13044734138261877090, 12279121806497756411, 13006021405420561768, 3449113736025125455, 12674311247800414868, 3881031270289157158, 3659214941764035737, 3734941211149545969, 3300349190028374141, 3574641203270264563, 3711586804611002374, 3073338165361751054, 3747461435935864037, 3484008086060381027, 12399722922614764148, 3658387827796685223, 3523562248192766798, 12921165148042212844, 3722983242679955760, 12959157047966218140, 3903127674318952606, 3832891689827940357, 13057677984109505912, 3888339047597321928, 3313298344349610336, 12720891415786924654, 12464611071619150648, 12583957640129390947, 12157798152198464424, 3172688463896390762, 3535377140552053495, 12333863365762590208 });
        input = Layer(20, input, new ulong[105] { 3520185665065891229, 3748740627413872844, 12425625232538350791, 12665158414378477689, 12952678545130501369, 3329907760590795705, 12117134526955074527, 12582121293131264073, 3204929782801606230, 2771025989358727243, 12991804019808448836, 12916240465638863149, 3565920319375913799, 12992368071459875710, 3211964780262274354, 12353712941545597460, 3637137021149950359, 3732136999047771163, 3785183500164477996, 13039240821243749416, 12282491816091103407, 12583253489282856196, 3127524213549183961, 3376065825600255029, 4020921992951836472, 3563812278383094440, 3266293614610197392, 3771255898211232646, 3800525370304082044, 12832924278342399195, 3015781772408826149, 12544547462997914356, 3892002397031281539, 3872023688580673958, 13012925372101013520, 12921860135954756485, 13057682247024030290, 12826590848796439685, 3815870992181014981, 3176364633651656260, 12677541915848028349, 3041648109647639649, 4004177620251487305, 3917189521676839989, 12406208557202777930, 3836418117697287595, 12837563506432289977, 2644928758303503614, 3752665926988082265, 3660767415857099079, 12954100037213367478, 12988577406475776307, 3067993963311637688, 13053154732968129081, 3788144888748487015, 3852038793583111550, 2833105240515753627, 3470351470842623118, 12209738128069997246, 3137214875173989626, 3109229635121525973, 12832194136117717361, 12423235772584309766, 3188324324753879321, 12649122164439494579, 13115244822523523306, 3255878523169551692, 3785897791916026909, 13049520346689514847, 3170592792722286656, 12507107230364677283, 2979749857249505423, 3747611313099059708, 2855197658961684762, 3812773921236561088, 3608981225681466512, 11825800431368844524, 12783245474022110555, 3780539891029587375, 3684979608975324169, 3578446282276383773, 13019682012744724140, 12765366442165024490, 12114027784060350639, 3872581377418933356, 13069921009737838919, 3705816101569017037, 12693735516614800569, 12922002939507387727, 3612502634724406446, 3573084758623040469, 12697535860370713460, 3410963158569923463, 3553249510998289891, 3928035658662654933, 3822201595553461226, 3239968548919290559, 12508805153362817011, 3734369804429337285, 3741278920175465200, 12145535986176862625, 3259527866442658016, 3263464938298091223, 12111923967086832742, 11973992660307618417 });
        input = Layer(1, input, new ulong[6] { 2648588605060554461, 3776469095372009629, 12986182167624658645, 12601131076059149630, 12707811135966163540, 10274 });

        return input[0];
    }

    double[] Layer(int outputLength, double[] input, ulong[] rawWeights)
    {
        double[] output = new double[outputLength + 1];

        for (int i = 0; i < input.Length; i++)
        {
            for (int j = 0; j < outputLength; j++)
            {
                int weightIndex = i * outputLength + j;
                output[j] += (double) BitConverter.ToHalf(BitConverter.GetBytes(rawWeights[weightIndex / 4]), weightIndex % 4 * 2) * input[i];
            }
        }

        for (int i = 0; i < output.Length; i++)
            output[i] = outputLength == 1 ? Math.Tanh(output[i]) : Math.Max(0, output[i]);

        output[outputLength] = 1;
        return output;
    }
}